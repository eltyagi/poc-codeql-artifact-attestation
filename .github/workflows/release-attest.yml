name: "Release Attestation"

on:
    push: 
        branches: ["main"]
    release:
        types: ["published"]

permissions:
    contents: read
    attestations: write
    id-token: write
    actions: read
    security-events: read

jobs:
    create-release-attestation:
        name: Create Release Attestation
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        

        - name: Wait for build workflow completion
          run: |
            echo "‚è≥ Waiting for build workflow to complete..."
            sleep 30  # Give build workflow time to complete
            
            # Check if build workflow has completed for this commit
            WORKFLOW_STATUS=$(gh api repos/${{ github.repository }}/actions/runs \
              --jq --arg sha "${{ github.sha }}" '
              .workflow_runs[] | 
              select(.head_sha == $sha and .name == "Build and Attest Artifacts") | 
              select(.status == "completed") | 
              .conclusion' | head -1)
            
            if [ "$WORKFLOW_STATUS" = "success" ]; then
              echo "‚úÖ Build workflow completed successfully"
            else
              echo "‚ö†Ô∏è Build workflow status: $WORKFLOW_STATUS (continuing anyway)"
            fi
          env:
            GH_TOKEN: ${{ github.token }}
        
        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: vulnerable-app-source
            path: ./
          continue-on-error: true
        
        - name: Prepare artifact for attestation
          id: prepare_artifact
          run: |
            echo "üì¶ Preparing artifact for attestation..."
            
            # Check if artifact was downloaded
            if [ -f "vulnerable-app-${{ github.sha }}.tar.gz" ]; then
              echo "‚úÖ Found artifact: vulnerable-app-${{ github.sha }}.tar.gz"
              echo "artifact_exists=true" >> $GITHUB_OUTPUT
              echo "artifact_name=vulnerable-app-${{ github.sha }}.tar.gz" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Artifact not found from download, creating placeholder for attestation"
              # Create a simple placeholder file for attestation demonstration
              echo "This is a placeholder for attestation demo" > "vulnerable-app-${{ github.sha }}.tar.gz"
              echo "artifact_exists=false" >> $GITHUB_OUTPUT
              echo "artifact_name=vulnerable-app-${{ github.sha }}.tar.gz" >> $GITHUB_OUTPUT
            fi
            
            # Get file hash for verification
            if [ -f "vulnerable-app-${{ github.sha }}.tar.gz" ]; then
              SHA256=$(sha256sum "vulnerable-app-${{ github.sha }}.tar.gz" | cut -d' ' -f1)
              echo "üîê File SHA256: $SHA256"
              echo "artifact_hash=$SHA256" >> $GITHUB_OUTPUT
            fi
        
        - name: Get CodeQL security state for release
          id: codeql
          run: |
            echo "üîç Getting current CodeQL security state for release artifact"
            
            # Get all open CodeQL alerts for the main branch at this commit
            ALERTS_DATA=$(gh api repos/${{ github.repository }}/code-scanning/alerts \
              --jq --arg ref "refs/heads/main" --arg sha "${{ github.sha }}" '
              map(select(.state == "open" and .most_recent_instance.ref == $ref)) |
              {
                scan_timestamp: now | strftime("%Y-%m-%dT%H:%M:%SZ"),
                commit_sha: $sha,
                total_open_alerts: length,
                severity_breakdown: (group_by(.rule.severity) | map({severity: .[0].rule.severity, count: length})),
                security_summary: {
                  critical: map(select(.rule.security_severity_level == "critical")) | length,
                  high: map(select(.rule.security_severity_level == "high")) | length,
                  medium: map(select(.rule.security_severity_level == "medium")) | length,
                  low: map(select(.rule.security_severity_level == "low")) | length
                },
                representative_alerts: map({
                  number: .number,
                  rule_id: .rule.id,
                  severity: .rule.severity,
                  security_severity_level: .rule.security_severity_level,
                  created_at: .created_at
                }) | .[0:5]
              }')
            
            echo "security_state=$ALERTS_DATA" >> $GITHUB_OUTPUT
            echo "üìä Security state for release:"
            echo "$ALERTS_DATA" | jq '.'

          env: 
            GH_TOKEN: ${{github.token}}
        
        - name: Get PR information
          id: pr_info
          if: github.event_name == 'push'
          run: |
            # Get the PR that was merged for this commit
            PR_DATA=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/pulls \
            --jq 'first | {number: .number, title: .title, user: .user.login, merged_at: .merged_at}')
            
            # Use multiline output format for GitHub Actions  
            {
              echo 'pr_data<<EOF'
              echo "$PR_DATA"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            
            echo "üîÄ Merged PR: $PR_DATA"
          env:
            GH_TOKEN: ${{ github.token }}

        - name: Security state summary
          run: |
            echo "## üîí Release Security State" >> $GITHUB_STEP_SUMMARY
            ALERTS_COUNT=$(echo '${{ steps.codeql.outputs.security_state }}' | jq -r '.total_open_alerts // 0')
            
            echo "**Security Assessment at Release Time**" >> $GITHUB_STEP_SUMMARY
            echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Scan Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$ALERTS_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è **$ALERTS_COUNT open security alerts present**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Severity Breakdown:**" >> $GITHUB_STEP_SUMMARY
              echo '${{ steps.codeql.outputs.security_state }}' | jq -r '.security_summary | "- Critical: \(.critical), High: \(.high), Medium: \(.medium), Low: \(.low)"' >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ **No open security alerts found**" >> $GITHUB_STEP_SUMMARY
            fi

        - name: Create security assessment attestation
          if: steps.prepare_artifact.outputs.artifact_exists == 'true' || steps.prepare_artifact.outputs.artifact_exists == 'false'
          uses: actions/attest@v1
          with:
            subject-path: '${{ steps.prepare_artifact.outputs.artifact_name }}'
            predicate-type: "https://in-toto.io/Statement/v0.1"
            predicate: |
              {
                "_type": "https://in-toto.io/Statement/v0.1",
                "predicateType": "https://github.com/in-toto/attestation/blob/main/spec/predicates/vulns_02.md",
                "predicate": {
                  "invocation": {
                    "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "event_id": "${{ github.run_id }}",
                    "builder_id": "https://github.com/actions/attest@v1"
                  },
                  "scanner": {
                    "uri": "https://github.com/github/codeql-action",
                    "version": "v3",
                    "result": ${{ steps.codeql.outputs.security_state }}
                  },
                  "metadata": {
                    "scannedOn": "${{ steps.codeql.outputs.security_state }}"
                  }

                }
              }

        - name: Create release provenance attestation
          if: steps.prepare_artifact.outputs.artifact_exists == 'true' || steps.prepare_artifact.outputs.artifact_exists == 'false'
          uses: actions/attest@v1
          with:
            subject-path: '${{ steps.prepare_artifact.outputs.artifact_name }}'
            predicate-type: "https://slsa.dev/provenance/v1"
            predicate: |
                {
                "buildDefinition": {
                  "buildType": "https://github.com/actions/workflow@v1",
                  "externalParameters": {
                    "workflow": {
                      "ref": "${{ github.ref }}",
                      "repository": "${{ github.repository }}",
                      "path": ".github/workflows/release-attest.yml"
                    }
                  },
                  "internalParameters": {
                    "github": {
                      "event_name": "${{ github.event_name }}",
                      "repository_id": "${{ github.repository_id }}",
                      "repository_owner_id": "${{ github.repository_owner_id }}"
                    }
                  },
                  "resolvedDependencies": [{
                    "uri": "git+${{ github.server_url }}/${{ github.repository }}@${{ github.ref }}",
                    "digest": {
                      "sha1": "${{ github.sha }}"
                    }
                  }]
                },
                "runDetails": {
                  "builder": {
                    "id": "https://github.com/actions/runner@v2"
                  },
                  "metadata": {
                    "invocationId": "${{ github.run_id }}",
                    "startedOn": "${{ github.event.head_commit.timestamp }}",
                    "finishedOn": "${{ github.event.head_commit.timestamp }}"
                  }
                }
                }

        - name: Verify attestation chain
          run: |

            echo "üîê Verifying attestation chain for artifact..."
            
            # Use the artifact name from the prepare step
            ARTIFACT_FILE="${{ steps.prepare_artifact.outputs.artifact_name }}"
            ARTIFACT_EXISTS="${{ steps.prepare_artifact.outputs.artifact_exists }}"
            
            echo "üìÅ Target artifact: $ARTIFACT_FILE"
            echo "üìä Artifact exists: $ARTIFACT_EXISTS"
            
            # Check if artifact exists locally
            if [ -f "$ARTIFACT_FILE" ]; then
              echo "‚úÖ Found local artifact: $ARTIFACT_FILE"
            else
              echo "‚ö†Ô∏è Local artifact not found, but continuing verification..."
            fi
            
            echo "üîç Verifying build provenance attestation..."
            if gh attestation verify "$ARTIFACT_FILE" \
              --repo ${{ github.repository }} \
              --signer-workflow ".github/workflows/build-attest.yml"; then
              echo "‚úÖ Build provenance verification successful!"
            else
              echo "‚ö†Ô∏è Build provenance verification failed or no attestations found"
            fi
            
            echo "üîç Verifying security notice attestation..."
            if gh attestation verify "$ARTIFACT_FILE" \
              --repo ${{ github.repository }} \
              --predicate-type "https://slsa.dev/spec/v1.1/provenance"; then
              echo "‚úÖ Security notice verification successful!"
            else
              echo "‚ö†Ô∏è Security notice verification failed or no attestations found"
            fi
            
            echo "üîç Verifying release attestations created in this workflow..."
            if gh attestation verify "$ARTIFACT_FILE" \
              --repo ${{ github.repository }} \
              --signer-workflow ".github/workflows/release-attest.yml"; then
              echo "‚úÖ Release attestation verification successful!"
            else
              echo "‚ö†Ô∏è Release attestation verification failed - this is expected if attestations were just created"
            fi
            
            echo "üîç Getting detailed attestation information..."
            gh attestation verify "$ARTIFACT_FILE" \
              --repo ${{ github.repository }} \
              --format json | jq -r '.[] | "Predicate: " + .verificationResult.statement.predicateType + " | Signer: " + .verificationResult.statement.predicate.runDetails.builder.id' || echo "Could not retrieve detailed info"
            
            echo "‚úÖ Attestation verification complete!"

          env:
            GH_TOKEN: ${{ github.token }}



