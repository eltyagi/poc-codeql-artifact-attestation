name: "Release Attestation"

on:
    push: 
        branches: ["main"]
    release:
        types: ["published"]

permissions:
    contents: read
    attestations: write
    id-token: write
    actions: read
    security-events: read

jobs:
    create-release-attestation:
        name: Create Release Attestation
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        
        - name: Get latest CodeQL results
          id: codeql
          run: |
            # Get the latest CodeQL scan results via GitHub API for all languages
            PYTHON_SCAN=$(gh api repos/${{ github.repository }}/code-scanning/analyses \
              --jq 'map(select(.tool.name == "CodeQL" and .category == "/language:python")) | first | {id: .id, created_at: .created_at, results_count: .results_count, language: "python"}')
            
            ACTIONS_SCAN=$(gh api repos/${{ github.repository }}/code-scanning/analyses \
              --jq 'map(select(.tool.name == "CodeQL" and .category == "/language:actions")) | first | {id: .id, created_at: .created_at, results_count: .results_count, language: "actions"}')
            
            # Combine both scan results and save to file for proper JSON handling
            COMBINED_SCANS=$(echo "$PYTHON_SCAN $ACTIONS_SCAN" | jq -s 'map(select(. != null))')
            echo "$COMBINED_SCANS" > /tmp/codeql-scans.json
            
            # Use multiline output format for GitHub Actions
            {
              echo 'scan_data<<EOF'
              echo "$COMBINED_SCANS"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            
            echo "📊 Latest CodeQL scans:"
            echo "Python: $PYTHON_SCAN"
            echo "Actions: $ACTIONS_SCAN"
            echo "Combined: $COMBINED_SCANS"
          env: 
            GH_TOKEN: ${{github.token}}
        
        - name: Get PR information
          id: pr_info
          if: github.event_name == 'push'
          run: |
            # Get the PR that was merged for this commit
            PR_DATA=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/pulls \
            --jq 'first | {number: .number, title: .title, user: .user.login, merged_at: .merged_at}')
            
            # Use multiline output format for GitHub Actions  
            {
              echo 'pr_data<<EOF'
              echo "$PR_DATA"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            
            echo "🔀 Merged PR: $PR_DATA"
          env:
            GH_TOKEN: ${{ github.token }}

        - name: Create release metadata
          run: |
            # Create a simple release manifest as our attestation subject
            cat > release-manifest.json << 'EOF'
            {
              "repository": "${{ github.repository }}",
              "commit_sha": "${{ github.sha }}",
              "release_timestamp": "${{ github.event.head_commit.timestamp }}",
              "release_version": "dev-${{ github.sha }}",
              "workflow_run_id": "${{ github.run_id }}"
            }
            EOF
            
            echo "📦 Created release manifest:"
            cat release-manifest.json
        
        - name: Create comprehensive release attestation
          uses: actions/attest@v1
          with:
            subject-path: 'release-manifest.json'
            predicate-type: "https://slsa.dev/spec/v1.1/provenance"
            predicate: |
                {
                "release_approval": {
                "status": "approved",
                "approved_by": "${{ github.actor }}",
                "approval_time": "${{ github.event.head_commit.timestamp }}",
                "release_type": "main_branch_merge",
                "environment": "development"
                },
                "security_context": {
                "codeql_scans": ${{ steps.codeql.outputs.scan_data }},
                "security_review_status": "vulnerable_by_design",
                "compliance_notes": "Educational use only - contains intentional vulnerabilities"
                },
                "source_context": {
                "pr_info": ${{ steps.pr_info.outputs.pr_data }},
                "commit": {
                    "sha": "${{ github.sha }}",
                    "message": "${{ github.event.head_commit.message }}",
                    "author": "${{ github.event.head_commit.author.name }}",
                    "timestamp": "${{ github.event.head_commit.timestamp }}"
                }
                },
                "attestation_chain": {
                "build_attestation": "linked",
                "provenance_attestation": "linked", 
                "sbom_attestation": "linked",
                "codeql_attestation": "linked"
                }
                }

        - name: Verify attestation chain
          run: |
            echo "🔐 Verifying attestation chain for release..."
            if [ -f "release-manifest.json" ]; then
              # Use GitHub CLI to verify attestations
              gh attestation verify release-manifest.json \
                --owner ${{ github.repository_owner }} || echo "⚠️ Verification failed or no attestations found"
              
              echo "✅ Release attestation created for commit ${{ github.sha }}"
              echo "📋 Attestation includes CodeQL scan results and security context"
            else
              echo "❌ Release manifest not found"
              exit 1
            fi
          env:
            GH_TOKEN: ${{ github.token }}



