name: "Build and Attest Artifacts"

on:
    pull_request:
        branches: ["main"]
    push: 
        branches: ["main"]
    release:
        types: ["created"]
    workflow_dispatch:

permissions:
    id-token: write
    contents: read
    attestations: write
    packages: write
    actions: read
jobs:
    build-and-package:
        name: Build and Package Artifacts
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Create artifact package
              id: package
              run: |
                # Create simple source package
                tar --exclude='.git' \
                    --exclude='venv' \
                    --exclude='__pycache__' \
                    --exclude='*.log' \
                    --exclude='*.db' \
                    -czf vulnerable-app-${{ github.sha }}.tar.gz \
                    *.py requirements.txt README.md

                    # Generate hash
                    SHA256=$(sha256sum vulnerable-app-${{ github.sha }}.tar.gz | cut -d' ' -f1)
                    echo "sha256=$SHA256" >> $GITHUB_OUTPUT
                    echo "artifact=vulnerable-app-${{ github.sha }}.tar.gz" >> $GITHUB_OUTPUT
                    
                    echo "üì¶ Created: vulnerable-app-${{ github.sha }}.tar.gz"
                    echo "üîê SHA256: $SHA256"
            
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                name: vulnerable-app-source
                path: artifacts/vulnerabile-app-${{ github.sha }}.tar.gz
            
            - name: Attest build provenance
              uses: actions/attest-build-provenance@v1
              with: 
                subject-path: artifacts/vulnerabile-app-${{ github.sha }}.tar.gz
            
            - name: Create security notice attestation
              uses: actions/attest@v1
              with:
                subject-path: artifacts/vulnerabile-app-${{ github.sha }}.tar.gz
                predicate: |
                    {
                        "notice": "INTENTIONALLY VULNERABLE SOFTWARE",
                        "purpose": "Security testing and education only",
                        "warnings": ["Contains SQL injection", "Contains XSS", "Contains command injection"],
                        "do_not_use_in_production": true,
                        "build_info": {
                        "repository": "${{ github.repository }}",
                        "commit": "${{ github.sha }}",
                        "workflow_run": "${{ github.run_id }}"
                        }
                    }

        
        

        

